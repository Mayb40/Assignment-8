library(shiny)
library(shiny)
shinyUI(fluidPage(
titlePanel("Reddit comment word clouds"),
# Create a text input with the label "add reddit comment link here" and a default
# value of "Enter text..."
textInput("text", label = h4("add a Reddit comment link here"), value = "Enter text..."),
# Create an action button
actionButton("render", "Change"),
# Plot the output here
plotOutput("plot")
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Reddit comment word clouds"),
# Create a text input with the label "add reddit comment link here" and a default
# value of "Enter text..."
textInput("text", label = h4("add a Reddit comment link here"), value = "Enter text..."),
# Create an action button
actionButton("render", "Change"),
# Plot the output here
plotOutput("plot")
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Reddit comment word clouds"),
# Create a text input with the label "add reddit comment link here" and a default
# value of "Enter text..."
textInput("text", label = h4("add a Reddit comment link here"), value = "Enter text..."),
# Create an action button
actionButton("render", "Change"),
# Plot the output here
plotOutput("plot")
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Reddit comment word clouds"),
# Create a text input with the label "add reddit comment link here" and a default
# value of "Enter text..."
textInput("text", label = h4("add a Reddit comment link here"), value = "Enter text..."),
# Create an action button
actionButton("render", "Change"),
# Plot the output here
plotOutput("plot")
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Reddit comment word clouds"),
# Create a text input with the label "add reddit comment link here" and a default
# value of "Enter text..."
textInput("text", label = h4("add a Reddit comment link here"), value = "Enter text..."),
# Create an action button
actionButton("render", "Change"),
# Plot the output here
plotOutput("plot")
))
source('~/Documents/Assignment-8/ui.R')
shiny::runApp()
library(shiny)
library(plotly)
setwd('~/Documents/Assignment-8')
library(plotly)
library(shiny)
library(dplyr)
data <- data("iris")
View(data)
data <- data(iris)
View(data)
View(iris)
class(data)
data <- read.csv("iris")
data <- read.csv("iris.csv")
data <- read.csv(iris.csv)
data <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"), header = FALSE)
View(data)
data <- data(iris)
class(data)
data <- iris
data
data
class(data)
View(data)
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='mayb40',
token='257AF3F90903DDD1A338DAFF741B2DBC',
secret='<SECRET>')
rsconnect::deployApp('path/to/your/app')
rsconnect::setAccountInfo(name='mayb40',
token='257AF3F90903DDD1A338DAFF741B2DBC',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mayb40', token='257AF3F90903DDD1A338DAFF741B2DBC', secret='+6tihGjNricKz5mhZLJRcpEbLb9HBnxfuRZ9YBGj')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
View(data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- iris
build_scatter <- function(data, xvar = 'Petal.Length', yvar = 'Species') {
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
lol
# Filter down to state, then graph
shiny::runApp()
